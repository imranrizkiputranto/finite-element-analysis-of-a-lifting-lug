# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep('C:/Users/xh20879/Documents/FEA Summative/Summative v2.step', 
    scaleFromFile=OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, mergeSolidRegions=True, name='Summative v2'
    , type=DEFORMABLE_BODY)
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Elastic(table=((209000.0, 0.3), ))
mdb.models['Model-1'].materials['Steel'].Plastic(scaleStress=None, table=((
    355.0, 0.0), ))
mdb.models['Model-1'].materials['Steel'].Density(table=((8010.0, ), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name='Lug', 
    thickness=None)
mdb.models['Model-1'].parts['Summative v2'].Set(cells=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Summative v2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Summative v2'].sets['Set-1'], sectionName=
    'Lug', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Summative v2-1'
    , part=mdb.models['Model-1'].parts['Summative v2'])
mdb.models['Model-1'].StaticStep(initialInc=0.1, name='BeamLoad', previous=
    'Initial')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='BeamLoad'
    , distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'Fixed End', region=mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=
    0.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
del mdb.models['Model-1'].boundaryConditions['Fixed End']
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='Set-2')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Fixed End', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-2'], u1=SET, u2=SET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#1000 ]', ), ), name='Set-3')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Fixed End2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-3'], u1=SET, u2=SET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='BeamLoad', 
    distributionType=UNIFORM, field='', magnitude=31.226, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=100.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT078142', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT078142', 'handle': 3024, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 128.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 30.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Nov 10 14:31:11 2022', 
    'jobName': 'Job-1'})
# Save by xh20879 on 2022_11_10-14.33.10; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].loads['Load-1']
# Save by xh20879 on 2022_11_10-14.47.43; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Pin', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Pin'].BaseSolidExtrude(depth=50.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=400.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(65.0, 20.0))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 10.0), point1=(0.0, 50.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], radius=25.0, 
    textPoint=(-24.5394058227539, 11.203369140625))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], point1=(
    18.8470516204834, 34.891357421875), point2=(19.3421535491943, 
    41.5680313110352))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], point1=(
    18.9708309173584, 14.7377014160156), point2=(19.2183895111084, 
    9.91565704345703))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], point1=(
    23.1792430877686, 32.1712265014648), point2=(17.733060836792, 
    34.6440734863281))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], ))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], ))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], point1=(
    21.3225917816162, 12.7594261169434), point2=(24.417028427124, 
    15.2322692871094))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], ))
mdb.models['Model-1'].sketches['__profile__'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], nearPoint1=(
    20.9512691497803, 38.4769744873047), nearPoint2=(25.2834606170654, 
    34.7677154541016), radius=10.0)
mdb.models['Model-1'].sketches['__profile__'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], nearPoint1=(
    18.9708309173584, 7.93738555908203), nearPoint2=(24.7883586883545, 
    15.1086235046387), radius=10.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 25.0), point1=(0.0, 30.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], radius=10.0, 
    textPoint=(-0.709741115570068, 14.2431297302246))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Lug2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Lug2'].BaseSolidExtrude(depth=50.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Pin'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Pin'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Pin'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByOffset(flip=SIDE1, offset=30.0, 
    plane=mdb.models['Model-1'].parts['Lug2'].faces[5])
mdb.models['Model-1'].parts['Lug2'].DatumAxisByCylFace(face=
    mdb.models['Model-1'].parts['Lug2'].faces[6])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.63, name='__profile__', 
    sheetSize=265.52, transform=
    mdb.models['Model-1'].parts['Lug2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Lug2'].edges[3], 
    sketchOrientation=RIGHT, origin=(20.0, 65.0, 25.0)))
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(-20.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(gridAuto=
    OFF, gridSpacing=5.0, sheetAuto=OFF, sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(10.0, 10.5), 
    point2=(-50.0, -10.5))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.63, name='__profile__', 
    sheetSize=265.52, transform=
    mdb.models['Model-1'].parts['Lug2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Lug2'].edges[3], 
    sketchOrientation=RIGHT, origin=(20.0, 65.0, 25.0)))
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.63, name='__profile__', 
    sheetSize=265.52, transform=
    mdb.models['Model-1'].parts['Lug2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Lug2'].edges[3], 
    sketchOrientation=RIGHT, origin=(20.0, 65.0, 25.0)))
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(-20.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(gridAuto=
    OFF, gridSpacing=5.0, sheetAuto=OFF, sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(10.15, 0.0), 
    point2=(-50.0, -15.0))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.63, name='__profile__', 
    sheetSize=265.52, transform=
    mdb.models['Model-1'].parts['Lug2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Lug2'].edges[3], 
    sketchOrientation=RIGHT, origin=(20.0, 65.0, 25.0)))
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    gridOrigin=(-20.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(gridAuto=
    OFF, gridSpacing=5.0, sheetAuto=OFF, sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(10.0, 15.0), 
    point2=(-50.0, -15.0))
mdb.models['Model-1'].parts['Lug2'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Lug2'].edges[3])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Lug2'].Round(edgeList=(
    mdb.models['Model-1'].parts['Lug2'].edges[3], ), radius=5.0)
mdb.models['Model-1'].parts['Lug2'].Round(edgeList=(
    mdb.models['Model-1'].parts['Lug2'].edges[7], ), radius=5.0)
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name='Pin', 
    thickness=None)
mdb.models['Model-1'].parts['Pin'].Set(cells=
    mdb.models['Model-1'].parts['Pin'].cells.getSequenceFromMask(('[#1 ]', ), )
    , name='Set-1')
mdb.models['Model-1'].parts['Pin'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Pin'].sets['Set-1'], sectionName='Pin', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name='Lug2', 
    thickness=None)
mdb.models['Model-1'].parts['Lug2'].Set(cells=
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['Lug2'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Lug2'].sets['Set-1'], sectionName='Lug2', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Summative v2'].DatumAxisByCylFace(face=
    mdb.models['Model-1'].parts['Summative v2'].faces[0])
mdb.models['Model-1'].parts['Pin'].DatumAxisByCylFace(face=
    mdb.models['Model-1'].parts['Pin'].faces[0])
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Summative v2-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Lug2-1', part=
    mdb.models['Model-1'].parts['Lug2'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Pin-1', part=
    mdb.models['Model-1'].parts['Pin'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Summative v2-1'
    , part=mdb.models['Model-1'].parts['Summative v2'])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].datums[3])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=OFF, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].datums[3])
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Lug2-1', 'Edge to Edge-2'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Pin-1', 'Edge to Edge-1'))
del mdb.models['Model-1'].rootAssembly.features['Summative v2-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Lug2-1', part=
    mdb.models['Model-1'].parts['Lug2'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Pin-1', part=
    mdb.models['Model-1'].parts['Pin'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Summative v2-1'
    , part=mdb.models['Model-1'].parts['Summative v2'])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].datums[3])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].datums[3])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Lug2-1', ), vector=
    (0.0, 0.0, -10.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Pin-1', ), vector=(
    0.0, 0.0, -10.0))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].sketch)
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -23.3808841705322, -17.904914855957), value=70.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2])
mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].setValues(sketch=
    mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.0, 0.0, 
    -10.0), axisPoint=(145.0, 0.0, 0.0), instanceList=('Lug2-1', ))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].sketch)
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[0], ))
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -13.3061599731445, -18.3844757080078), value=65.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2])
mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].setValues(sketch=
    mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].sketch)
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[1], ))
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    -10.3596458435059, -17.3989143371582), value=70.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2])
mdb.models['Model-1'].parts['Lug2'].features['Cut extrude-1'].setValues(sketch=
    mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ContactProperty('Friction')
mdb.models['Model-1'].interactionProperties['Friction'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].ContactStd(createStepName='Initial', name='Contact')
mdb.models['Model-1'].interactions['Contact'].includedPairs.setValuesInStep(
    stepName='Initial', useAllstar=ON)
mdb.models['Model-1'].interactions['Contact'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'Friction'), ), stepName='Initial')
# Save by xh20879 on 2022_11_15-17.55.50; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].steps['BeamLoad']
mdb.models['Model-1'].StaticStep(description='Settle Contact', initialInc=0.1, 
    name='Settle', nlgeom=ON, previous='Initial')
mdb.models['Model-1'].StaticStep(initialInc=0.1, name='Full Load', previous=
    'Settle')
del mdb.models['Model-1'].boundaryConditions['Fixed End']
del mdb.models['Model-1'].boundaryConditions['Fixed End2']
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='Set-4')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Fixed End', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-4'], u1=SET, u2=SET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#1000 ]', ), ), name='Set-5')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Fixed End 2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-5'], u1=SET, u2=SET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#400 ]', ), ), name='Set-6')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Guide', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-6'], u1=SET, u2=UNSET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.DatumPointByMidPoint(point1=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].edges[24], MIDDLE), 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].edges[36], MIDDLE))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Lug2'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Lug2'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.Set(name='Set-7', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].vertices.getSequenceFromMask(
    ('[#8000000 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf1=1.0, createStepName='Settle', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-7'])
del mdb.models['Model-1'].loads['Load-1']
# Save by xh20879 on 2022_11_15-18.26.17; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XZPLANE)
mdb.models['Model-1'].parts['Lug2'].features['Datum plane-2'].setValues(offset=
    25.0)
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].parts['Lug2'].datums[8], faces=
    mdb.models['Model-1'].parts['Lug2'].faces.getSequenceFromMask(('[#400 ]', 
    ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].parts['Lug2'].features['Datum plane-3'].setValues(offset=
    25.0)
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].parts['Lug2'].datums[10], faces=
    mdb.models['Model-1'].parts['Lug2'].faces.getSequenceFromMask(('[#801 ]', 
    ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#2000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Settle', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='SmallPressure', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-2'])
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Settle', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='SmallPressure1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-3'])
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-4', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Settle', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='SmallPressure2', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-4'])
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-5', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Settle', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='SmallPressure3', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-5'])
mdb.models['Model-1'].rootAssembly.Set(name='Set-8', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].vertices.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=58860.0, createStepName='Full Load'
    , distributionType=UNIFORM, field='', localCsys=None, name='FullLoad', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-8'])
mdb.models['Model-1'].parts['Lug2'].setMeshControls(regions=
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].setMeshControls(regions=
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), technique=BOTTOM_UP)
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['Lug2'].setMeshControls(elemShape=HEX_DOMINATED, 
    regions=mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['Lug2'].setMeshControls(elemShape=TET, regions=
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), technique=FREE)
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10HS, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Pin'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(mdb.models['Model-1'].parts['Pin'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=3.0)
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].parts['Pin'].deleteMesh()
mdb.models['Model-1'].parts['Pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=1.0)
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Load', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Load'].submit(consistencyChecking=OFF)
mdb.jobs['Load']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT096548', 'handle': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load.odb', 'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT096548', 'handle': 2140, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 13264.0})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 1462.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
del mdb.jobs['Load']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Pin'].deleteMesh()
mdb.models['Model-1'].parts['Pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=4.0)
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Load', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Load'].submit(consistencyChecking=OFF)
mdb.jobs['Load']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Load'})
mdb.jobs['Load'].submit(consistencyChecking=OFF)
mdb.jobs['Load']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT096548', 'handle': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load.odb', 'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT096548', 'handle': 15480, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 2649.0})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 374.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
del mdb.jobs['Load']
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4H, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Pin'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Pin'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['Pin'].deleteMesh()
mdb.models['Model-1'].parts['Pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=10.0)
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Load', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Load'].submit(consistencyChecking=OFF)
mdb.jobs['Load']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT096548', 'handle': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT096548', 'handle': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load.odb', 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load.odb', 'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT096548', 'handle': 13816, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT096548', 'handle': 13816, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 43.0})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 43.0})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Load', 'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Load', 'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Load', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Load', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Load', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Load', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Load', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Load', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Load', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Load', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero VOL. FLUX everywhere in the model based on the default criterion. please check the value of the average VOL. FLUX during the current iteration to verify that the VOL. FLUX is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero VOL. FLUX.', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Load', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Load', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Load']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 40.0})
mdb.jobs['Load']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load', 'memory': 40.0})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 32457.0, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
mdb.jobs['Load']._Message(MINIMUM_MEMORY, {'minimum_memory': 20.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Load', 'severe': 9, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Load', 'severe': 9, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Load', 'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Load', 'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Load', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Load'})
mdb.jobs['Load']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Load'})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Load', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Load', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load'})
mdb.jobs['Load']._Message(JOB_COMPLETED, {'time': 'Wed Nov 16 12:57:07 2022', 
    'jobName': 'Load'})
mdb.jobs['Load']._Message(JOB_COMPLETED, {'time': 'Wed Nov 16 12:57:07 2022', 
    'jobName': 'Load'})
# Save by xh20879 on 2022_11_16-13.10.51; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_16-13.11.49; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].parts['Lug2']
del mdb.models['Model-1'].parts['Pin']
mdb.models['Model-1'].rootAssembly.suppressFeatures(featureNames=('Lug2-1', 
    'Pin-1'))
mdb.models['Model-1'].parts['Summative v2'].DatumPlaneByPrincipalPlane(offset=
    25.0, principalPlane=XYPLANE)
mdb.models['Model-1'].parts['Summative v2'].DatumPlaneByPrincipalPlane(offset=
    0.0, principalPlane=XZPLANE)
mdb.models['Model-1'].parts['Summative v2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Summative v2'].PartitionFaceByDatumPlane(
    datumPlane=mdb.models['Model-1'].parts['Summative v2'].datums[19], faces=
    mdb.models['Model-1'].parts['Summative v2'].faces.getSequenceFromMask((
    '[#1ffff ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Full Load', 
    distributionType=UNIFORM, field='', magnitude=100000000.0, name='Load-6', 
    region=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )))
del mdb.models['Model-1'].loads['Load-6']
mdb.models['Model-1'].SurfaceTraction(createStepName='Full Load', 
    directionVector=((0.0, 0.0, 0.0), (0.0, 1.0, 0.0)), distributionType=
    UNIFORM, field='', follower=OFF, localCsys=None, magnitude=100000000.0, 
    name='Load-6', region=Region(
    side1Faces=mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), traction=GENERAL)
del mdb.models['Model-1'].loads['SmallPressure']
del mdb.models['Model-1'].loads['SmallPressure1']
del mdb.models['Model-1'].loads['SmallPressure2']
del mdb.models['Model-1'].loads['SmallPressure3']
mdb.models['Model-1'].loads['Load-6'].setValues(magnitude=1.873)
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(elemShape=
    HEX_DOMINATED, regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
# Save by xh20879 on 2022_11_17-14.39.13; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Summative v2'].regenerate()
mdb.models['Model-1'].parts['Summative v2'].regenerate()
mdb.models['Model-1'].parts['Summative v2'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Pin-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Lug2-1', 'Datum pt-1'))
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-1']
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-2']
del mdb.models['Model-1'].boundaryConditions['Guide']
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(elemShape=
    HEX_DOMINATED, regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=BOTTOM_UP)
mdb.models['Model-1'].parts['Summative v2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Load1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
del mdb.models['Model-1'].loads['FullLoad']
mdb.jobs['Load1'].submit(consistencyChecking=OFF)
mdb.jobs['Load1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load1.odb', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 1368, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load1', 'memory': 6635.0})
mdb.jobs['Load1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MINIMUM_MEMORY, {'minimum_memory': 755.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
del mdb.jobs['Load1']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Load1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Load1'].submit(consistencyChecking=OFF)
mdb.jobs['Load1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load1.odb', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Load1.odb', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 4896, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 4896, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STEP, {'stepName': 'Settle Contact', 
    'phase': STANDARD_PHASE, 'stepId': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load1', 'memory': 1275.0})
mdb.jobs['Load1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load1', 'memory': 1275.0})
mdb.jobs['Load1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MINIMUM_MEMORY, {'minimum_memory': 179.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MINIMUM_MEMORY, {'minimum_memory': 179.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Load1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Load1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load1', 'memory': 1275.0})
mdb.jobs['Load1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Load1', 'memory': 1275.0})
mdb.jobs['Load1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MINIMUM_MEMORY, {'minimum_memory': 179.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(MINIMUM_MEMORY, {'minimum_memory': 179.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Load1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Load1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load1']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Load1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Load1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Load1'})
mdb.jobs['Load1']._Message(JOB_COMPLETED, {'time': 'Thu Nov 17 14:53:51 2022', 
    'jobName': 'Load1'})
mdb.jobs['Load1']._Message(JOB_COMPLETED, {'time': 'Thu Nov 17 14:53:51 2022', 
    'jobName': 'Load1'})
# Save by xh20879 on 2022_11_17-14.55.16; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_17-14.56.27; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].loads['Load-6']
del mdb.models['Model-1'].parts['Summative v2'].features['Partition face-1']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.0, 10.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Pin', type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Model-1'].parts['Pin'].BaseSolidExtrude(depth=50.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Pin'].RemoveCells(cellList=
    mdb.models['Model-1'].parts['Pin'].cells.getSequenceFromMask(mask=('[#1 ]', 
    ), ))
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(-65.0, 20.0))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    -65.0, 10.0), point1=(-65.0, 35.0))
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], midpoint=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4])
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], point1=(
    -45.6603240966797, 26.5436267852783), point2=(-49.0039596557617, 
    20.1961765289307))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], point1=(
    -50.2299575805664, -10.538854598999), point2=(-50.3414154052734, 
    0.485666275024414))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], point1=(
    -48.1123199462891, 20.4188899993896), point2=(-44.9916000366211, 
    23.9823741912842))
mdb.models['Model-1'].sketches['__profile__'].breakCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], point1=(
    -47.1092300415039, 0.374307632446289), point2=(-45.8832321166992, 
    -5.19363212585449))
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[10]))
mdb.models['Model-1'].sketches['__profile__'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], nearPoint1=(
    -43.9885025024414, 22.6460666656494), nearPoint2=(-38.6386871337891, 
    20.1961765289307), radius=10.0)
mdb.models['Model-1'].sketches['__profile__'].FilletByRadius(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], curve2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], nearPoint1=(
    -43.8770446777344, -3.74596977233887), nearPoint2=(-39.1959533691406, 
    0.485666275024414), radius=10.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    -65.0, 10.0), point1=(-65.0, 20.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Lug2', type=
    DISCRETE_RIGID_SURFACE)
mdb.models['Model-1'].parts['Lug2'].BaseSolidExtrude(depth=50.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByOffset(flip=SIDE1, offset=30.0, 
    plane=mdb.models['Model-1'].parts['Lug2'].faces[3])
mdb.models['Model-1'].parts['Lug2'].DatumAxisByCylFace(face=
    mdb.models['Model-1'].parts['Lug2'].faces[6])
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=6.63, name='__profile__', 
    sheetSize=265.52, transform=
    mdb.models['Model-1'].parts['Lug2'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Lug2'].edges[13], 
    sketchOrientation=RIGHT, origin=(-45.0, 50.0, 25.0)))
mdb.models['Model-1'].parts['Lug2'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(gridAuto=
    OFF, gridSpacing=5.0, sheetAuto=OFF, sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-50.0, 15.0), 
    point2=(25.0, -15.0))
mdb.models['Model-1'].parts['Lug2'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['Lug2'].datums[2], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Lug2'].edges[13])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Lug2'].Round(edgeList=(
    mdb.models['Model-1'].parts['Lug2'].edges[2], 
    mdb.models['Model-1'].parts['Lug2'].edges[13]), radius=5.0)
mdb.models['Model-1'].parts['Lug2'].RemoveCells(cellList=
    mdb.models['Model-1'].parts['Lug2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Pin'].DatumAxisByCylFace(face=
    mdb.models['Model-1'].parts['Pin'].faces[0])
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Summative v2-1']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Lug2-1', part=
    mdb.models['Model-1'].parts['Lug2'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Pin-1', part=
    mdb.models['Model-1'].parts['Pin'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Summative v2-1'
    , part=mdb.models['Model-1'].parts['Summative v2'])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].datums[3])
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-1']
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].edges[24])
del mdb.models['Model-1'].rootAssembly.features['Edge to Edge-1']
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].datums[3])
mdb.models['Model-1'].rootAssembly.EdgeToEdge(fixedAxis=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].datums[8], 
    flip=ON, movableAxis=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].datums[3])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Pin-1', 'Lug2-1'), 
    vector=(0.0, 0.0, -10.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.0, 0.0, 
    -10.0), axisPoint=(145.0, 0.0, 0.0), instanceList=('Lug2-1', ))
del mdb.models['Model-1'].interactions['Contact']
del mdb.models['Model-1'].steps['Settle']
del mdb.models['Model-1'].steps['Full Load']
mdb.models['Model-1'].ContactStd(createStepName='Initial', name='Contact')
mdb.models['Model-1'].interactions['Contact'].includedPairs.setValuesInStep(
    stepName='Initial', useAllstar=ON)
mdb.models['Model-1'].interactions['Contact'].contactPropertyAssignments.appendInStep(
    assignments=((GLOBAL, SELF, 'Friction'), ), stepName='Initial')
mdb.models['Model-1'].StaticStep(initialInc=0.1, name='Settle', nlgeom=ON, 
    previous='Initial')
mdb.models['Model-1'].StaticStep(initialInc=0.1, name='Full load', previous=
    'Settle')
del mdb.models['Model-1'].boundaryConditions['Fixed End']
del mdb.models['Model-1'].boundaryConditions['Fixed End 2']
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Summative v2-1'].faces.getSequenceFromMask(
    ('[#1004 ]', ), ), name='Set-9')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'Fixed End Top', region=mdb.models['Model-1'].rootAssembly.sets['Set-9'], 
    u1=SET, u2=SET, u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#4000 ]', ), ), name='Set-10')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='Guide', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-10'], u1=SET, u2=UNSET, 
    u3=SET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-6', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].faces.getSequenceFromMask(
    ('[#4000 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Settle', 
    distributionType=UNIFORM, field='', magnitude=0.001, name='SmallPressure', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-6'])
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XYPLANE)
mdb.models['Model-1'].parts['Lug2'].features['Datum plane-2'].setValues(offset=
    25.0)
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].DatumPlaneByPrincipalPlane(offset=0.0, 
    principalPlane=XZPLANE)
mdb.models['Model-1'].parts['Lug2'].features['Datum plane-3'].setValues(offset=
    25.0)
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].features['Datum plane-3'].setValues(offset=
    10.0)
mdb.models['Model-1'].parts['Lug2'].regenerate()
mdb.models['Model-1'].parts['Lug2'].PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].parts['Lug2'].datums[8], faces=
    mdb.models['Model-1'].parts['Lug2'].faces.getSequenceFromMask(('[#3ffff ]', 
    ), ))
mdb.models['Model-1'].parts['Lug2'].PartitionFaceByDatumPlane(datumPlane=
    mdb.models['Model-1'].parts['Lug2'].datums[7], faces=
    mdb.models['Model-1'].parts['Lug2'].faces.getSequenceFromMask((
    '[#3fffffff ]', ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='Set-11', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].vertices.getSequenceFromMask(
    ('[#1000 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf2=58860.0, createStepName='Full load'
    , distributionType=UNIFORM, field='', localCsys=None, name='FullLoad', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-11'])
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(algorithm=
    ADVANCING_FRONT, elemShape=HEX, regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Lug2'].setElementType(elemTypes=(ElemType(
    elemCode=R3D4, elemLibrary=STANDARD), ElemType(elemCode=R3D3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Lug2'].faces.getSequenceFromMask((
    '[#ffffffff #f ]', ), ), ))
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Pin'].setElementType(elemTypes=(ElemType(
    elemCode=R3D4, elemLibrary=STANDARD), ElemType(elemCode=R3D3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Pin'].faces.getSequenceFromMask(('[#7 ]', ), 
    ), ))
mdb.models['Model-1'].parts['Pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=2.8)
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['Load1']
del mdb.jobs['Load']
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Size5,AdvancedFront', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs.changeKey(fromName='Size5,AdvancedFront', toName=
    'Size5,AdvancedFront,HexQuad')
del mdb.jobs['Size5,AdvancedFront,HexQuad']
mdb.models['Model-1'].parts['Lug2'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Lug2'].vertices[12])
mdb.models['Model-1'].parts['Pin'].ReferencePoint(point=
    mdb.models['Model-1'].parts['Pin'].vertices[0])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Size5,AdvancedFront,HexQuad', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Size5,AdvancedFront,HexQuad'].submit(consistencyChecking=OFF)
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'IT077179', 'handle': 0, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '2 nodes associated with rigid bodies have boundary conditions prescribed at nodes other than the reference node. These boundary conditions will be transferred to the associated rigid body reference node.The reference nodes and the dependent nodes have been identified in node set WarnNodeOverconBoundRB.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Nodes belonging to 1 RIGID BODIES have boundary conditions prescribed at nodes other than the reference node. These boundary conditions indicate the rigid bodies cannot rotate about certain axes. Zero rotational boundary conditions have been added to these reference nodes.The reference nodes have been identified in node set WarnNodeOverconBoundRBRot.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Size5,AdvancedFront,HexQuad.odb', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'IT077179', 'handle': 2420, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Size5,AdvancedFront,HexQuad', 
    'memory': 143.0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16166.0, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 46.0, 'phase': STANDARD_PHASE, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 7, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 8, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.00625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'Size5,AdvancedFront,HexQuad', 
    'severe': 22, 'iterations': 22, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0015625, 'attempts': 4, 'timeIncrement': 0.0015625, 
    'increment': 1, 'stepTime': 0.0015625, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0015625, 'attempts': ' 1U', 'timeIncrement': 0.0015625, 
    'increment': 2, 'stepTime': 0.0015625, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 18, 'iterations': 18, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0015625, 'attempts': ' 2U', 'timeIncrement': 0.000390625, 
    'increment': 2, 'stepTime': 0.0015625, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 50, 'iterations': 50, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00166015625, 'attempts': 3, 'timeIncrement': 9.765625e-05, 
    'increment': 2, 'stepTime': 0.00166015625, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.001806640625, 'attempts': 1, 
    'timeIncrement': 0.000146484375, 'increment': 3, 
    'stepTime': 0.001806640625, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0020263671875, 'attempts': 1, 
    'timeIncrement': 0.0002197265625, 'increment': 4, 
    'stepTime': 0.0020263671875, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0020263671875, 'attempts': ' 1U', 
    'timeIncrement': 0.00032958984375, 'increment': 5, 
    'stepTime': 0.0020263671875, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 21, 'iterations': 21, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0021087646484375, 'attempts': 2, 
    'timeIncrement': 8.23974609375e-05, 'increment': 5, 
    'stepTime': 0.0021087646484375, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00223236083984375, 'attempts': 1, 
    'timeIncrement': 0.00012359619140625, 'increment': 6, 
    'stepTime': 0.00223236083984375, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00241775512695313, 'attempts': 1, 
    'timeIncrement': 0.000185394287109375, 'increment': 7, 
    'stepTime': 0.00241775512695313, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00241775512695313, 'attempts': ' 1U', 
    'timeIncrement': 0.000278091430664063, 'increment': 8, 
    'stepTime': 0.00241775512695313, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 26, 'iterations': 26, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00248727798461914, 'attempts': 2, 
    'timeIncrement': 6.95228576660156e-05, 'increment': 8, 
    'stepTime': 0.00248727798461914, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00248727798461914, 'attempts': ' 1U', 
    'timeIncrement': 0.000104284286499023, 'increment': 9, 
    'stepTime': 0.00248727798461914, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 36, 'iterations': 36, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.0025133490562439, 'attempts': 2, 
    'timeIncrement': 2.60710716247559e-05, 'increment': 9, 
    'stepTime': 0.0025133490562439, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00255245566368103, 'attempts': 1, 
    'timeIncrement': 3.91066074371338e-05, 'increment': 10, 
    'stepTime': 0.00255245566368103, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00255245566368103, 'attempts': ' 1U', 
    'timeIncrement': 5.86599111557007e-05, 'increment': 11, 
    'stepTime': 0.00255245566368103, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 29, 'iterations': 29, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00256712064146996, 'attempts': 2, 
    'timeIncrement': 1.46649777889252e-05, 'increment': 11, 
    'stepTime': 0.00256712064146996, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00256712064146996, 'attempts': ' 1U', 
    'timeIncrement': 2.19974666833878e-05, 'increment': 12, 
    'stepTime': 0.00256712064146996, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 30, 'iterations': 30, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00257712064146996, 'attempts': 2, 'timeIncrement': 1e-05, 
    'increment': 12, 'stepTime': 0.00257712064146996, 'step': 1, 
    'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00257712064146996, 'attempts': ' 1U', 
    'timeIncrement': 1.5e-05, 'increment': 13, 'stepTime': 0.00257712064146996, 
    'step': 1, 'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 26, 
    'iterations': 26, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(STATUS, {
    'totalTime': 0.00257712064146996, 'attempts': ' 2U', 
    'timeIncrement': 1e-05, 'increment': 13, 'stepTime': 0.00257712064146996, 
    'step': 1, 'jobName': 'Size5,AdvancedFront,HexQuad', 'severe': 29, 
    'iterations': 29, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
mdb.jobs['Size5,AdvancedFront,HexQuad']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Size5,AdvancedFront,HexQuad'})
# Save by xh20879 on 2022_11_18-12.11.41; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Summative v2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Size5,TetQuad', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Size5,TetQuad'].submit(consistencyChecking=OFF)
mdb.jobs['Size5,TetQuad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes associated with rigid bodies have boundary conditions prescribed at nodes other than the reference node. These boundary conditions will be transferred to the associated rigid body reference node.The reference nodes and the dependent nodes have been identified in node set WarnNodeOverconBoundRB.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Nodes belonging to 1 RIGID BODIES have boundary conditions prescribed at nodes other than the reference node. These boundary conditions indicate the rigid bodies cannot rotate about certain axes. Zero rotational boundary conditions have been added to these reference nodes.The reference nodes have been identified in node set WarnNodeOverconBoundRBRot.', 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Size5,TetQuad.odb', 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 8976, 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Size5,TetQuad', 'memory': 1205.0})
mdb.jobs['Size5,TetQuad']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Size5,TetQuad'})
mdb.jobs['Size5,TetQuad']._Message(MINIMUM_MEMORY, {'minimum_memory': 168.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Size5,TetQuad'})
del mdb.jobs['Size5,TetQuad']
mdb.models['Model-1'].rootAssembly.Set(name='Set-12', referencePoints=((
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].referencePoints[13], 
    ), (
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].referencePoints[6], 
    )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='LugRef', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-12'], u1=SET, u2=UNSET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
mdb.models['Model-1'].parts['Summative v2'].deleteMesh(regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['Model-1'].parts['Summative v2'].setMeshControls(algorithm=
    ADVANCING_FRONT, elemShape=HEX, regions=
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['Size5,AdvancedFront,HexQuad']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Size7dot5,HexQuad', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Size7dot5,HexQuad'].submit(consistencyChecking=OFF)
mdb.jobs['Size7dot5,HexQuad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (96 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,101 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (97 INSTANCE LUG2-1,96 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (101 INSTANCE LUG2-1,100 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (98 INSTANCE LUG2-1,97 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (100 INSTANCE LUG2-1,99 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (31 INSTANCE LUG2-1,98 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (99 INSTANCE LUG2-1,32 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Size7dot5,HexQuad.odb', 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 15504, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Size7dot5,HexQuad', 'memory': 50.0})
mdb.jobs['Size7dot5,HexQuad']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16166.0, 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0874999999999999, 'increment': 6, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'Size7dot5,HexQuad', 'severe': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'Size7dot5,HexQuad', 'memory': 50.0})
mdb.jobs['Size7dot5,HexQuad']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 16166.0, 
    'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(MINIMUM_MEMORY, {'minimum_memory': 22.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 1.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(STATUS, {'totalTime': 2.0, 
    'attempts': 1, 'timeIncrement': 0.0874999999999999, 'increment': 6, 
    'stepTime': 1.0, 'step': 2, 'jobName': 'Size7dot5,HexQuad', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size7dot5,HexQuad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Size7dot5,HexQuad'})
mdb.jobs['Size7dot5,HexQuad']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 18 12:18:40 2022', 'jobName': 'Size7dot5,HexQuad'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Lug2'].deleteMesh()
mdb.models['Model-1'].parts['Lug2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Lug2'].generateMesh()
mdb.models['Model-1'].parts['Pin'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Size5,HexQuad', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Size5,HexQuad'].submit(consistencyChecking=OFF)
mdb.jobs['Size5,HexQuad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Size5,HexQuad.odb', 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 9804, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Size5,HexQuad', 'memory': 128.0})
mdb.jobs['Size5,HexQuad']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(MINIMUM_MEMORY, {'minimum_memory': 30.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Size5,HexQuad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Size5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Size5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Size5,HexQuad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Size5,HexQuad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Size5,HexQuad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Size5,HexQuad', 'memory': 125.0})
mdb.jobs['Size5,HexQuad']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Size5,HexQuad', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Size5,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Size5,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Size5,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Size5,HexQuad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Size5,HexQuad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Size5,HexQuad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Size5,HexQuad'})
mdb.jobs['Size5,HexQuad']._Message(JOB_COMPLETED, {
    'time': 'Fri Nov 18 12:26:22 2022', 'jobName': 'Size5,HexQuad'})
# Save by xh20879 on 2022_11_18-12.27.03; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['Steel'].density.setValues(table=((8.01e-06, ), 
    ))
# Save by xh20879 on 2022_11_18-12.42.14; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Trial', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Trial'].submit(consistencyChecking=OFF)
mdb.jobs['Trial']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT077179', 'handle': 0, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Trial.odb', 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT077179', 'handle': 13956, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Trial', 'memory': 128.0})
mdb.jobs['Trial']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(MINIMUM_MEMORY, {'minimum_memory': 30.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Trial', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Trial', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Trial', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Trial', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Trial', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Trial', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Trial']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Trial', 'memory': 125.0})
mdb.jobs['Trial']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16166.0, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Trial', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Trial', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Trial', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Trial', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Trial', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Trial']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Trial', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Trial']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Trial'})
mdb.jobs['Trial']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Trial'})
mdb.jobs['Trial']._Message(JOB_COMPLETED, {'time': 'Fri Nov 18 12:44:58 2022', 
    'jobName': 'Trial'})
# Save by xh20879 on 2022_11_18-12.46.00; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_18-12.48.51; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_18-12.51.47; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_18-13.00.14; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].boundaryConditions['LugRef']
mdb.models['Model-1'].rootAssembly.Set(name='Set-13', referencePoints=((
    mdb.models['Model-1'].rootAssembly.instances['Lug2-1'].referencePoints[13], 
    ), (
    mdb.models['Model-1'].rootAssembly.instances['Pin-1'].referencePoints[6], 
    )))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='LugRef', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-13'], u1=SET, u2=UNSET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
del mdb.jobs['Size5,HexQuad']
del mdb.jobs['Size7dot5,HexQuad']
del mdb.jobs['Trial']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Seed5,Hex,Quad', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Seed5,Hex,Quad'].submit(consistencyChecking=OFF)
mdb.jobs['Seed5,Hex,Quad']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Seed5,Hex,Quad.odb', 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 15232, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Seed5,Hex,Quad', 'memory': 128.0})
mdb.jobs['Seed5,Hex,Quad']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(MINIMUM_MEMORY, {'minimum_memory': 30.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'Seed5,Hex,Quad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Seed5,Hex,Quad', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Seed5,Hex,Quad', 'memory': 125.0})
mdb.jobs['Seed5,Hex,Quad']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Seed5,Hex,Quad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 1.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 2, 'jobName': 'Seed5,Hex,Quad', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Seed5,Hex,Quad', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Seed5,Hex,Quad']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Seed5,Hex,Quad'})
mdb.jobs['Seed5,Hex,Quad']._Message(JOB_COMPLETED, {
    'time': 'Mon Nov 21 15:27:02 2022', 'jobName': 'Seed5,Hex,Quad'})
# Save by xh20879 on 2022_11_21-15.31.46; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_21-15.33.43; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_21-15.41.57; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_21-15.42.10; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_21-16.09.05; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['Seed5,Hex,Quad']
mdb.Job(atTime=None, contactPrint=OFF, description='2.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(HEADING, {'phase': BATCHPRE_PHASE, 'heading': '2.5', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 6392, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1293.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 174.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-1', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Job-1', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Job-1', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1283.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 173.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-1', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-1', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Job-1', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Job-1', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Job-1', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Job-1', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Nov 24 11:13:47 2022', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,2d5', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,2d5'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,2d5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,2d5.odb', 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,2d5'})
mdb.jobs.changeKey(fromName='Quadratic,2d5', toName='Quadratic,5')
#* Jobs which are in process cannot be renamed.
mdb.jobs['Quadratic,2d5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 5704, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,2d5', 'memory': 812.0})
mdb.jobs['Quadratic,2d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 127.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quadratic,2d5', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quadratic,2d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quadratic,2d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quadratic,2d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quadratic,2d5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quadratic,2d5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,2d5', 'memory': 806.0})
mdb.jobs['Quadratic,2d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 126.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quadratic,2d5', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quadratic,2d5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quadratic,2d5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quadratic,2d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quadratic,2d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quadratic,2d5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,2d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,2d5'})
mdb.jobs['Quadratic,2d5']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 11:23:56 2022', 'jobName': 'Quadratic,2d5'})
mdb.jobs.changeKey(fromName='Quadratic,2d5', toName='Quadratic,5')
mdb.jobs.changeKey(fromName='Quadratic,5', toName='Quadratic,2d5')
mdb.jobs['Quadratic,2d5'].setValues(description='this is actually 5 seed size', 
    numThreadsPerMpiProcess=1)
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='2.5 seed size', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,2dot5', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,2dot5'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,2dot5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '2.5 seed size', 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,2dot5.odb', 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 2428, 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,2dot5', 'memory': 10904.0})
mdb.jobs['Quadratic,2dot5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,2dot5'})
mdb.jobs['Quadratic,2dot5']._Message(MINIMUM_MEMORY, {'minimum_memory': 1238.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,2dot5'})
del mdb.jobs['Quadratic,2dot5']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,3', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,3'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,3.odb', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 3252, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3', 'memory': 5365.0})
mdb.jobs['Quadratic,3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MINIMUM_MEMORY, {'minimum_memory': 649.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'Quadratic,3'})
del mdb.jobs['Quadratic,3']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='4 seed size', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,4', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,4'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '4 seed size', 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,4.odb', 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 6012, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,4', 'memory': 1979.0})
mdb.jobs['Quadratic,4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(MINIMUM_MEMORY, {'minimum_memory': 266.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quadratic,4', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quadratic,4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quadratic,4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quadratic,4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quadratic,4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quadratic,4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,4', 'memory': 1955.0})
mdb.jobs['Quadratic,4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(MINIMUM_MEMORY, {'minimum_memory': 265.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quadratic,4', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quadratic,4', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quadratic,4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quadratic,4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quadratic,4', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quadratic,4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,4'})
mdb.jobs['Quadratic,4']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 11:51:15 2022', 'jobName': 'Quadratic,4'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,3d5', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,3d5'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,3d5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,3d5.odb', 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 8484, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3d5', 'memory': 3028.0})
mdb.jobs['Quadratic,3d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 382.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quadratic,3d5', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quadratic,3d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quadratic,3d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quadratic,3d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quadratic,3d5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quadratic,3d5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3d5', 'memory': 2998.0})
mdb.jobs['Quadratic,3d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 380.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quadratic,3d5', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quadratic,3d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quadratic,3d5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quadratic,3d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quadratic,3d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quadratic,3d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3d5'})
mdb.jobs['Quadratic,3d5']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 12:12:50 2022', 'jobName': 'Quadratic,3d5'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='3 seed size', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic,3', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic,3'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '3 seed size', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '3 seed size', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,3.odb', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic,3.odb', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 13212, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 13212, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3', 'memory': 5365.0})
mdb.jobs['Quadratic,3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3', 'memory': 5365.0})
mdb.jobs['Quadratic,3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MINIMUM_MEMORY, {'minimum_memory': 649.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MINIMUM_MEMORY, {'minimum_memory': 649.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quadratic,3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quadratic,3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quadratic,3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3', 'memory': 5367.0})
mdb.jobs['Quadratic,3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic,3', 'memory': 5367.0})
mdb.jobs['Quadratic,3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MINIMUM_MEMORY, {'minimum_memory': 647.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(MINIMUM_MEMORY, {'minimum_memory': 647.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quadratic,3', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quadratic,3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quadratic,3']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 12:54:52 2022', 'jobName': 'Quadratic,3'})
mdb.jobs['Quadratic,3']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 12:54:52 2022', 'jobName': 'Quadratic,3'})
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='1.5 seed size', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear,1dot5', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Linear,1dot5'].submit(consistencyChecking=OFF)
mdb.jobs['Linear,1dot5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '1.5 seed size', 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear,1dot5.odb', 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 13756, 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear,1dot5', 'memory': 9301.0})
mdb.jobs['Linear,1dot5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear,1dot5'})
mdb.jobs['Linear,1dot5']._Message(MINIMUM_MEMORY, {'minimum_memory': 1077.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear,1dot5'})
del mdb.jobs['Linear,1dot5']
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear,2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear,2'].submit(consistencyChecking=OFF)
mdb.jobs['Linear,2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear,2.odb', 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 3880, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear,2', 'memory': 3203.0})
mdb.jobs['Linear,2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(MINIMUM_MEMORY, {'minimum_memory': 434.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear,2', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear,2', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear,2', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear,2', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear,2', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear,2', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear,2', 'memory': 3189.0})
mdb.jobs['Linear,2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(MINIMUM_MEMORY, {'minimum_memory': 432.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear,2', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear,2', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear,2', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear,2', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear,2', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear,2', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear,2'})
mdb.jobs['Linear,2']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 13:34:24 2022', 'jobName': 'Linear,2'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='1.75 seed size', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear,1d75', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Linear,1d75'].submit(consistencyChecking=OFF)
mdb.jobs['Linear,1d75']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': '1.75 seed size', 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '34 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear,1d75.odb', 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 5288, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear,1d75', 'memory': 5266.0})
mdb.jobs['Linear,1d75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(MINIMUM_MEMORY, {'minimum_memory': 671.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear,1d75', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear,1d75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear,1d75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear,1d75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear,1d75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear,1d75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear,1d75', 'memory': 5254.0})
mdb.jobs['Linear,1d75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(MINIMUM_MEMORY, {'minimum_memory': 669.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear,1d75', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear,1d75', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear,1d75', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear,1d75', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear,1d75', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear,1d75', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear,1d75']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear,1d75'})
mdb.jobs['Linear,1d75']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 14:23:20 2022', 'jobName': 'Linear,1d75'})
del mdb.jobs['Job-1']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Linear seed size 1.5', 
    echoPrint=OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, 
    historyPrint=OFF, memory=90, memoryUnits=PERCENTAGE, model='Model-1', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='Linear1d5', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, numThreadsPerMpiProcess=
    1, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Linear1d5'].submit(consistencyChecking=OFF)
mdb.jobs['Linear1d5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'IT081419', 'handle': 0, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Linear seed size 1.5', 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear1d5.odb', 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'IT081419', 'handle': 15888, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear1d5', 'memory': 9301.0})
mdb.jobs['Linear1d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 1077.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear1d5', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear1d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear1d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear1d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear1d5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear1d5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear1d5', 'memory': 9257.0})
mdb.jobs['Linear1d5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16100.0, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(MINIMUM_MEMORY, {'minimum_memory': 1075.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear1d5', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear1d5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear1d5', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear1d5', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear1d5', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear1d5', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear1d5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear1d5'})
mdb.jobs['Linear1d5']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 16:12:39 2022', 'jobName': 'Linear1d5'})
# Save by xh20879 on 2022_11_24-17.12.01; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_24-17.14.39; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 7', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear7', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear7'].submit(consistencyChecking=OFF)
mdb.jobs['Linear7']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 7', 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear7.odb', 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 6792, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear7', 'memory': 60.0})
mdb.jobs['Linear7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear7', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear7', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear7', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear7', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear7', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear7', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear7', 'memory': 59.0})
mdb.jobs['Linear7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear7', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear7', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear7', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear7', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear7', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear7', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear7'})
mdb.jobs['Linear7']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 19:43:33 2022', 'jobName': 'Linear7'})
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 2.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear275', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear275'].submit(consistencyChecking=OFF)
mdb.jobs['Linear275']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 2.75', 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear275.odb', 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 16196, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear275', 'memory': 1056.0})
mdb.jobs['Linear275']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(MINIMUM_MEMORY, {'minimum_memory': 173.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear275', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear275', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear275', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear275', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear275', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear275', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear275', 'memory': 1046.0})
mdb.jobs['Linear275']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(MINIMUM_MEMORY, {'minimum_memory': 173.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear275', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear275', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear275', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear275', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear275', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear275', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear275']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear275'})
mdb.jobs['Linear275']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 19:56:14 2022', 'jobName': 'Linear275'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 2.5', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear25', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear25'].submit(consistencyChecking=OFF)
mdb.jobs['Linear25']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 2.5', 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear25.odb', 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 26432, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear25', 'memory': 1404.0})
mdb.jobs['Linear25']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(MINIMUM_MEMORY, {'minimum_memory': 209.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear25', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear25', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear25', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear25', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear25', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear25', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear25', 'memory': 1396.0})
mdb.jobs['Linear25']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(MINIMUM_MEMORY, {'minimum_memory': 207.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear25', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear25', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear25', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear25', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear25', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear25', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear25']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear25'})
mdb.jobs['Linear25']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 20:11:02 2022', 'jobName': 'Linear25'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 2.25', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear225', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear225'].submit(consistencyChecking=OFF)
mdb.jobs['Linear225']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 2.25', 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear225.odb', 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 20272, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear225', 'memory': 2050.0})
mdb.jobs['Linear225']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(MINIMUM_MEMORY, {'minimum_memory': 285.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear225', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear225', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear225', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear225', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear225', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear225', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear225', 'memory': 2036.0})
mdb.jobs['Linear225']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(MINIMUM_MEMORY, {'minimum_memory': 284.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear225', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear225', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear225', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear225', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear225', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear225', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear225']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear225'})
mdb.jobs['Linear225']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 20:32:52 2022', 'jobName': 'Linear225'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 3', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear3', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear3'].submit(consistencyChecking=OFF)
mdb.jobs['Linear3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 3', 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear3.odb', 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 34616, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear3', 'memory': 725.0})
mdb.jobs['Linear3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(MINIMUM_MEMORY, {'minimum_memory': 130.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear3', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear3', 'severe': 9, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear3', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear3', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear3', 'memory': 730.0})
mdb.jobs['Linear3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(MINIMUM_MEMORY, {'minimum_memory': 117.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear3', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear3', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear3', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear3']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear3'})
mdb.jobs['Linear3']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 20:45:41 2022', 'jobName': 'Linear3'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 3.25', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear325', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear325'].submit(consistencyChecking=OFF)
mdb.jobs['Linear325']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 3.25', 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear325.odb', 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 31896, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear325', 'memory': 561.0})
mdb.jobs['Linear325']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(MINIMUM_MEMORY, {'minimum_memory': 106.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear325', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear325', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear325', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear325', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear325', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear325', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear325', 'memory': 558.0})
mdb.jobs['Linear325']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(MINIMUM_MEMORY, {'minimum_memory': 95.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear325', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear325', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear325', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear325', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear325', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear325', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear325']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear325'})
mdb.jobs['Linear325']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 20:55:33 2022', 'jobName': 'Linear325'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 3.5', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear35', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear35'].submit(consistencyChecking=OFF)
mdb.jobs['Linear35']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 3.5', 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear35.odb', 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 24792, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear35', 'memory': 447.0})
mdb.jobs['Linear35']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(MINIMUM_MEMORY, {'minimum_memory': 90.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear35', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear35', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear35', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear35', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear35', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear35', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear35', 'memory': 443.0})
mdb.jobs['Linear35']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(MINIMUM_MEMORY, {'minimum_memory': 80.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear35', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear35', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear35', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear35', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear35', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear35', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear35']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear35'})
mdb.jobs['Linear35']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:01:23 2022', 'jobName': 'Linear35'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 3.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear375', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear375'].submit(consistencyChecking=OFF)
mdb.jobs['Linear375']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 3.75', 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear375.odb', 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 34628, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear375', 'memory': 342.0})
mdb.jobs['Linear375']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(MINIMUM_MEMORY, {'minimum_memory': 77.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear375', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear375', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear375', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear375', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear375', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear375', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear375', 'memory': 339.0})
mdb.jobs['Linear375']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(MINIMUM_MEMORY, {'minimum_memory': 66.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear375', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear375', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear375', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear375', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear375', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear375', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear375']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear375'})
mdb.jobs['Linear375']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:08:45 2022', 'jobName': 'Linear375'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 4', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear4', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear4'].submit(consistencyChecking=OFF)
mdb.jobs['Linear4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 4', 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear4.odb', 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 31048, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear4', 'memory': 300.0})
mdb.jobs['Linear4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(MINIMUM_MEMORY, {'minimum_memory': 71.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear4', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear4', 'memory': 298.0})
mdb.jobs['Linear4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear4', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear4', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear4', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear4']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear4'})
mdb.jobs['Linear4']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:13:32 2022', 'jobName': 'Linear4'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 4.25', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear425', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear425'].submit(consistencyChecking=OFF)
mdb.jobs['Linear425']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 4.25', 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear425.odb', 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 35728, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear425', 'memory': 225.0})
mdb.jobs['Linear425']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear425', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear425', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear425', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear425', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear425', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear425', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear425', 'memory': 223.0})
mdb.jobs['Linear425']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(MINIMUM_MEMORY, {'minimum_memory': 53.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear425', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear425', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear425', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear425', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear425', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear425', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear425']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear425'})
mdb.jobs['Linear425']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:20:35 2022', 'jobName': 'Linear425'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed size 4.5', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear45', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear45'].submit(consistencyChecking=OFF)
mdb.jobs['Linear45']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed size 4.5', 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear45.odb', 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 14488, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear45', 'memory': 186.0})
mdb.jobs['Linear45']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(MINIMUM_MEMORY, {'minimum_memory': 53.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear45', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear45', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear45', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear45', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear45', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear45', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear45', 'memory': 182.0})
mdb.jobs['Linear45']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(MINIMUM_MEMORY, {'minimum_memory': 47.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear45', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear45', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear45', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear45', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear45', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear45', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear45']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear45'})
mdb.jobs['Linear45']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:27:02 2022', 'jobName': 'Linear45'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 4.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear475', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear475'].submit(consistencyChecking=OFF)
mdb.jobs['Linear475']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 4.75', 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear475.odb', 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 4528, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear475', 'memory': 158.0})
mdb.jobs['Linear475']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(MINIMUM_MEMORY, {'minimum_memory': 49.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear475', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear475', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear475', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear475', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear475', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear475', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear475', 'memory': 156.0})
mdb.jobs['Linear475']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(MINIMUM_MEMORY, {'minimum_memory': 43.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear475', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear475', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear475', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear475', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear475', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear475', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear475']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear475'})
mdb.jobs['Linear475']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:31:25 2022', 'jobName': 'Linear475'})
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8I, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 5', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear5', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear5'].submit(consistencyChecking=OFF)
mdb.jobs['Linear5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 5', 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear5.odb', 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 23868, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear5', 'memory': 143.0})
mdb.jobs['Linear5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(MINIMUM_MEMORY, {'minimum_memory': 46.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear5', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear5', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear5', 'memory': 140.0})
mdb.jobs['Linear5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(MINIMUM_MEMORY, {'minimum_memory': 41.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear5', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear5', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear5', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear5']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear5'})
mdb.jobs['Linear5']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:37:03 2022', 'jobName': 'Linear5'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 5.25', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear525', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear525'].submit(consistencyChecking=OFF)
mdb.jobs['Linear525']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 5.25', 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear525.odb', 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 16968, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear525', 'memory': 122.0})
mdb.jobs['Linear525']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(MINIMUM_MEMORY, {'minimum_memory': 42.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear525', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear525', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear525', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear525', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear525', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear525', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear525', 'memory': 119.0})
mdb.jobs['Linear525']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(MINIMUM_MEMORY, {'minimum_memory': 38.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear525', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear525', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear525', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear525', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear525', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear525', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear525']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear525'})
mdb.jobs['Linear525']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:45:59 2022', 'jobName': 'Linear525'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 5.5', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear55', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear55'].submit(consistencyChecking=OFF)
mdb.jobs['Linear55']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 5.5', 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear55.odb', 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 3220, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear55', 'memory': 101.0})
mdb.jobs['Linear55']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(MINIMUM_MEMORY, {'minimum_memory': 38.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear55', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear55', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear55', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear55', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear55', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear55', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear55', 'memory': 100.0})
mdb.jobs['Linear55']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(MINIMUM_MEMORY, {'minimum_memory': 35.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear55', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear55', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear55', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear55', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear55', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear55', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear55']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear55'})
mdb.jobs['Linear55']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:50:53 2022', 'jobName': 'Linear55'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 5.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear575', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear575'].submit(consistencyChecking=OFF)
mdb.jobs['Linear575']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 5.75', 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear575.odb', 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 3264, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear575', 'memory': 95.0})
mdb.jobs['Linear575']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear575', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear575', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear575', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear575', 'memory': 94.0})
mdb.jobs['Linear575']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(MINIMUM_MEMORY, {'minimum_memory': 34.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear575', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear575', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear575', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear575']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear575'})
mdb.jobs['Linear575']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:54:29 2022', 'jobName': 'Linear575'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 6', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear6', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear6'].submit(consistencyChecking=OFF)
mdb.jobs['Linear6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 6', 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear6.odb', 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 32660, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear6', 'memory': 87.0})
mdb.jobs['Linear6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(MINIMUM_MEMORY, {'minimum_memory': 36.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear6', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear6', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear6', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear6', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear6', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear6', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear6', 'memory': 86.0})
mdb.jobs['Linear6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(MINIMUM_MEMORY, {'minimum_memory': 33.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear6', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear6', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear6', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear6', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear6', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear6', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear6'})
mdb.jobs['Linear6']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 21:57:30 2022', 'jobName': 'Linear6'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 6.25', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear625', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear625'].submit(consistencyChecking=OFF)
mdb.jobs['Linear625']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 6.25', 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear625.odb', 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 4520, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear625', 'memory': 85.0})
mdb.jobs['Linear625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(MINIMUM_MEMORY, {'minimum_memory': 35.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear625', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear625', 'memory': 84.0})
mdb.jobs['Linear625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(MINIMUM_MEMORY, {'minimum_memory': 33.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear625', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear625'})
mdb.jobs['Linear625']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:04:18 2022', 'jobName': 'Linear625'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 6.5', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear65', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear65'].submit(consistencyChecking=OFF)
mdb.jobs['Linear65']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 6.5', 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear65.odb', 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 14380, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear65', 'memory': 76.0})
mdb.jobs['Linear65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(MINIMUM_MEMORY, {'minimum_memory': 32.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear65', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear65', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear65', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear65', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear65', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear65', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear65', 'memory': 75.0})
mdb.jobs['Linear65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(MINIMUM_MEMORY, {'minimum_memory': 30.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear65', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear65', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear65', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear65', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear65', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear65', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear65'})
mdb.jobs['Linear65']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:10:05 2022', 'jobName': 'Linear65'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 6.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear675', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear675'].submit(consistencyChecking=OFF)
mdb.jobs['Linear675']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 6.75', 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear675.odb', 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 28608, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear675', 'memory': 63.0})
mdb.jobs['Linear675']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear675', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear675', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear675', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear675', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear675', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear675', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear675', 'memory': 61.0})
mdb.jobs['Linear675']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear675', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear675', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear675', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear675', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear675']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear675'})
mdb.jobs['Linear675']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:13:03 2022', 'jobName': 'Linear675'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear75', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear75'].submit(consistencyChecking=OFF)
mdb.jobs['Linear75']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.5', 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear75.odb', 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 15828, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear75', 'memory': 55.0})
mdb.jobs['Linear75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear75', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear75', 'memory': 54.0})
mdb.jobs['Linear75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(MINIMUM_MEMORY, {'minimum_memory': 26.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear75', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear75', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear75', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear75', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear75', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear75', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear75']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear75'})
mdb.jobs['Linear75']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:16:02 2022', 'jobName': 'Linear75'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear8', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear8'].submit(consistencyChecking=OFF)
mdb.jobs['Linear8']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8', 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear8.odb', 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 29212, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear8', 'memory': 52.0})
mdb.jobs['Linear8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear8', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear8', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear8', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear8', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear8', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear8', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear8', 'memory': 51.0})
mdb.jobs['Linear8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear8', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear8', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear8', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear8', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear8', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear8', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear8'})
mdb.jobs['Linear8']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:20:35 2022', 'jobName': 'Linear8'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size8.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear85', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear85'].submit(consistencyChecking=OFF)
mdb.jobs['Linear85']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size8.5', 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear85.odb', 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 21216, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear85', 'memory': 48.0})
mdb.jobs['Linear85']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(MINIMUM_MEMORY, {'minimum_memory': 26.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear85', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear85', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear85', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear85', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear85', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear85', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear85', 'memory': 47.0})
mdb.jobs['Linear85']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear85', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear85', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear85', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear85', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear85', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear85', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear85']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear85'})
mdb.jobs['Linear85']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:25:50 2022', 'jobName': 'Linear85'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear9', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear9'].submit(consistencyChecking=OFF)
mdb.jobs['Linear9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9', 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear9.odb', 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 10300, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear9', 'memory': 43.0})
mdb.jobs['Linear9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear9', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear9', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear9', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear9', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear9', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear9', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear9', 'memory': 42.0})
mdb.jobs['Linear9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear9', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear9', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear9', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear9', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear9', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear9', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear9'})
mdb.jobs['Linear9']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:32:00 2022', 'jobName': 'Linear9'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear95', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear95'].submit(consistencyChecking=OFF)
mdb.jobs['Linear95']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9.5', 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear95.odb', 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 22476, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear95', 'memory': 40.0})
mdb.jobs['Linear95']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear95', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear95', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear95', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear95', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear95', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear95', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear95', 'memory': 39.0})
mdb.jobs['Linear95']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(MINIMUM_MEMORY, {'minimum_memory': 23.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear95', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear95', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear95', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear95', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear95', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear95', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear95']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear95'})
mdb.jobs['Linear95']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:34:51 2022', 'jobName': 'Linear95'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 10', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear10', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear10'].submit(consistencyChecking=OFF)
mdb.jobs['Linear10']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 10', 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear10.odb', 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 28188, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear10', 'memory': 39.0})
mdb.jobs['Linear10']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear10', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear10', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear10', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear10', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear10', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear10', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear10', 'memory': 38.0})
mdb.jobs['Linear10']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(MINIMUM_MEMORY, {'minimum_memory': 23.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear10', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear10', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear10', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear10', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear10', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear10', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear10']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear10'})
mdb.jobs['Linear10']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:38:43 2022', 'jobName': 'Linear10'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear725', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear725'].submit(consistencyChecking=OFF)
mdb.jobs['Linear725']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.25', 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '2 nodes have been adjusted. The nodes have been identified in node set WarnNodeAdjust.', 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear725.odb', 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 25376, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear725', 'memory': 57.0})
mdb.jobs['Linear725']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear725', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear725', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear725', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear725', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear725', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear725', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear725', 'memory': 56.0})
mdb.jobs['Linear725']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(MINIMUM_MEMORY, {'minimum_memory': 26.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear725', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear725', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear725', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear725', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear725', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear725', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear725']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear725'})
mdb.jobs['Linear725']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:46:33 2022', 'jobName': 'Linear725'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear775', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear775'].submit(consistencyChecking=OFF)
mdb.jobs['Linear775']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.75', 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear775.odb', 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 8644, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear775', 'memory': 52.0})
mdb.jobs['Linear775']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear775', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear775', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear775', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear775', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear775', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear775', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear775', 'memory': 51.0})
mdb.jobs['Linear775']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(MINIMUM_MEMORY, {'minimum_memory': 26.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear775', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear775', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear775']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear775'})
mdb.jobs['Linear775']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:49:59 2022', 'jobName': 'Linear775'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear825', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear825'].submit(consistencyChecking=OFF)
mdb.jobs['Linear825']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8.25', 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear825.odb', 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 19504, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear825', 'memory': 50.0})
mdb.jobs['Linear825']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear825', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear825', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear825', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear825', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear825', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear825', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear825', 'memory': 49.0})
mdb.jobs['Linear825']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear825', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear825', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear825', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear825']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear825'})
mdb.jobs['Linear825']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:53:25 2022', 'jobName': 'Linear825'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear875', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear875'].submit(consistencyChecking=OFF)
mdb.jobs['Linear875']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8.75', 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear875.odb', 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 19336, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear875', 'memory': 42.0})
mdb.jobs['Linear875']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear875', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear875', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear875', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear875', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear875', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear875', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear875', 'memory': 41.0})
mdb.jobs['Linear875']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear875', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear875', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear875', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear875']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear875'})
mdb.jobs['Linear875']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 22:56:43 2022', 'jobName': 'Linear875'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear925', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear925'].submit(consistencyChecking=OFF)
mdb.jobs['Linear925']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9.25', 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear925.odb', 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 2424, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear925', 'memory': 42.0})
mdb.jobs['Linear925']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear925', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear925', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear925', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear925', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear925', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear925', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear925', 'memory': 41.0})
mdb.jobs['Linear925']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear925', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear925', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear925', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear925']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear925'})
mdb.jobs['Linear925']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 23:00:36 2022', 'jobName': 'Linear925'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Linear975', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Linear975'].submit(consistencyChecking=OFF)
mdb.jobs['Linear975']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 0, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9.75', 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (30 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Linear975.odb', 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-2', 'handle': 4080, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear975', 'memory': 40.0})
mdb.jobs['Linear975']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Linear975', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Linear975', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Linear975', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Linear975', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Linear975', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Linear975', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Linear975', 'memory': 39.0})
mdb.jobs['Linear975']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(MINIMUM_MEMORY, {'minimum_memory': 23.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Linear975', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Linear975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Linear975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Linear975', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Linear975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Linear975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Linear975']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Linear975'})
mdb.jobs['Linear975']._Message(JOB_COMPLETED, {
    'time': 'Thu Nov 24 23:02:50 2022', 'jobName': 'Linear975'})
# Save by xh20879 on 2022_11_24-23.06.33; build 2022.HF3 2022_05_20-02.07.52 176569
# Save by xh20879 on 2022_11_24-23.07.08; build 2022.HF3 2022_05_20-02.07.52 176569
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=2.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].parts['Summative v2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['Quadratic,3']
mdb.Job(atTime=None, contactPrint=OFF, description='Quad, Size 3', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quadratic3', nodalOutputPrecision=SINGLE
    , numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Quadratic3'].submit(consistencyChecking=OFF)
mdb.jobs['Quadratic3']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Quad, Size 3', 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quadratic3.odb', 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 18436, 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quadratic3', 'memory': 5339.0})
mdb.jobs['Quadratic3']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quadratic3'})
mdb.jobs['Quadratic3']._Message(MINIMUM_MEMORY, {'minimum_memory': 627.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quadratic3'})
del mdb.jobs['Quadratic3']
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=10.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 10', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad10', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad10'].submit(consistencyChecking=OFF)
mdb.jobs['Quad10']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 10', 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad10.odb', 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 20572, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad10', 'memory': 98.0})
mdb.jobs['Quad10']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad10', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad10', 'severe': 10, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad10', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad10', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad10', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad10', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad10']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad10', 'memory': 94.0})
mdb.jobs['Quad10']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad10', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad10', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad10', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad10', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad10', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad10']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad10', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad10']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad10'})
mdb.jobs['Quad10']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:02:38 2022', 
    'jobName': 'Quad10'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 9.75', echoPrint=
    OFF, explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF
    , memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad975', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad975'].submit(consistencyChecking=OFF)
mdb.jobs['Quad975']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 9.75', 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad975.odb', 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 20580, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad975', 'memory': 104.0})
mdb.jobs['Quad975']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad975', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad975', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad975', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad975', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad975', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad975', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad975', 'memory': 99.0})
mdb.jobs['Quad975']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad975', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad975', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad975', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad975']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad975'})
mdb.jobs['Quad975']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:06:38 2022', 'jobName': 'Quad975'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad95', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad95'].submit(consistencyChecking=OFF)
mdb.jobs['Quad95']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9.5', 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad95.odb', 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 14736, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad95', 'memory': 103.0})
mdb.jobs['Quad95']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad95', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad95', 'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad95', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad95', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad95', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad95', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad95']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad95', 'memory': 98.0})
mdb.jobs['Quad95']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(MINIMUM_MEMORY, {'minimum_memory': 24.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad95', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad95', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad95', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad95', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad95', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad95']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad95', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad95']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad95'})
mdb.jobs['Quad95']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:14:13 2022', 
    'jobName': 'Quad95'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 9.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad925', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad925'].submit(consistencyChecking=OFF)
mdb.jobs['Quad925']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 9.25', 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad925.odb', 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 28552, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad925', 'memory': 116.0})
mdb.jobs['Quad925']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad925', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad925', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad925', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad925', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad925', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad925', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad925', 'memory': 111.0})
mdb.jobs['Quad925']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad925', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad925', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad925', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad925']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad925'})
mdb.jobs['Quad925']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:17:47 2022', 'jobName': 'Quad925'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=9.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Seed Size 9', echoPrint=OFF
    , explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad9', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad9'].submit(consistencyChecking=OFF)
mdb.jobs['Quad9']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Seed Size 9', 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad9.odb', 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 27672, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad9', 'memory': 122.0})
mdb.jobs['Quad9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(MINIMUM_MEMORY, {'minimum_memory': 29.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad9', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad9', 'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad9', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad9', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad9', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad9', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad9', 'memory': 116.0})
mdb.jobs['Quad9']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(MINIMUM_MEMORY, {'minimum_memory': 26.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad9', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad9', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad9', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad9', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad9', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad9']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad9', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad9']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad9'})
mdb.jobs['Quad9']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:22:15 2022', 
    'jobName': 'Quad9'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad875', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad875'].submit(consistencyChecking=OFF)
mdb.jobs['Quad875']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8.75', 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad875.odb', 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 5548, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad875', 'memory': 115.0})
mdb.jobs['Quad875']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad875', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad875', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad875', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad875', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad875', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad875', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad875', 'memory': 110.0})
mdb.jobs['Quad875']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(MINIMUM_MEMORY, {'minimum_memory': 25.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad875', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad875', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad875', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad875']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad875'})
mdb.jobs['Quad875']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:25:30 2022', 'jobName': 'Quad875'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad85', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad85'].submit(consistencyChecking=OFF)
mdb.jobs['Quad85']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8.5', 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad85.odb', 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 5020, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad85', 'memory': 150.0})
mdb.jobs['Quad85']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(MINIMUM_MEMORY, {'minimum_memory': 31.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad85', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad85', 'severe': 8, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad85', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad85', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad85', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad85', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad85']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad85', 'memory': 146.0})
mdb.jobs['Quad85']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(MINIMUM_MEMORY, {'minimum_memory': 31.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad85', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad85', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad85', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad85', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad85', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad85']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad85', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad85']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad85'})
mdb.jobs['Quad85']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:29:09 2022', 
    'jobName': 'Quad85'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad825', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad825'].submit(consistencyChecking=OFF)
mdb.jobs['Quad825']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8.25', 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad825.odb', 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 17016, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad825', 'memory': 172.0})
mdb.jobs['Quad825']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(MINIMUM_MEMORY, {'minimum_memory': 34.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad825', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad825', 'severe': 8, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad825', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad825', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad825', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad825', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad825', 'memory': 167.0})
mdb.jobs['Quad825']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(MINIMUM_MEMORY, {'minimum_memory': 33.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad825', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad825', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad825']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad825'})
mdb.jobs['Quad825']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:33:20 2022', 'jobName': 'Quad825'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 8', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad8', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad8'].submit(consistencyChecking=OFF)
mdb.jobs['Quad8']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 8', 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad8.odb', 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 23956, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad8', 'memory': 183.0})
mdb.jobs['Quad8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(MINIMUM_MEMORY, {'minimum_memory': 37.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad8', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad8', 'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad8', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad8', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad8', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad8', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad8', 'memory': 178.0})
mdb.jobs['Quad8']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(MINIMUM_MEMORY, {'minimum_memory': 36.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad8', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad8', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad8', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad8', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad8', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad8']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad8', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad8']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad8'})
mdb.jobs['Quad8']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:36:56 2022', 
    'jobName': 'Quad8'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad775', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad775'].submit(consistencyChecking=OFF)
mdb.jobs['Quad775']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.75', 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad775.odb', 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 19780, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad775', 'memory': 184.0})
mdb.jobs['Quad775']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(MINIMUM_MEMORY, {'minimum_memory': 36.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad775', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad775', 'severe': 9, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad775', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad775', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad775', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad775', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad775', 'memory': 179.0})
mdb.jobs['Quad775']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(MINIMUM_MEMORY, {'minimum_memory': 36.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad775', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad775', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad775']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad775'})
mdb.jobs['Quad775']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:40:21 2022', 'jobName': 'Quad775'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad75', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad75'].submit(consistencyChecking=OFF)
mdb.jobs['Quad75']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.5', 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '4 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad75.odb', 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 21260, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad75', 'memory': 212.0})
mdb.jobs['Quad75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(MINIMUM_MEMORY, {'minimum_memory': 42.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad75', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad75', 'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad75', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad75', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad75', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad75', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad75']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad75', 'memory': 205.0})
mdb.jobs['Quad75']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(MINIMUM_MEMORY, {'minimum_memory': 42.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad75', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad75', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad75', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad75', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad75', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad75']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad75', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad75']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad75'})
mdb.jobs['Quad75']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:45:44 2022', 
    'jobName': 'Quad75'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad725', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad725'].submit(consistencyChecking=OFF)
mdb.jobs['Quad725']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7.25', 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad725.odb', 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 23692, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad725', 'memory': 223.0})
mdb.jobs['Quad725']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(MINIMUM_MEMORY, {'minimum_memory': 42.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad725', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad725', 'severe': 9, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad725', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad725', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad725', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad725', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad725', 'memory': 218.0})
mdb.jobs['Quad725']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(MINIMUM_MEMORY, {'minimum_memory': 42.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad725', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad725', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad725', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad725', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad725', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad725', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad725']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad725'})
mdb.jobs['Quad725']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 21:49:35 2022', 'jobName': 'Quad725'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 7', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad7', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad7'].submit(consistencyChecking=OFF)
mdb.jobs['Quad7']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 7', 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad7.odb', 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 10324, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad7', 'memory': 242.0})
mdb.jobs['Quad7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(MINIMUM_MEMORY, {'minimum_memory': 46.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad7', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad7', 'severe': 9, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad7', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad7', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad7', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad7', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad7', 'memory': 235.0})
mdb.jobs['Quad7']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(MINIMUM_MEMORY, {'minimum_memory': 45.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad7', 'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad7', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad7', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad7', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad7', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad7']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad7', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad7']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad7'})
mdb.jobs['Quad7']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 21:53:43 2022', 
    'jobName': 'Quad7'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 6.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad675', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad675'].submit(consistencyChecking=OFF)
mdb.jobs['Quad675']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 6.75', 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad675.odb', 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 27672, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad675', 'memory': 254.0})
mdb.jobs['Quad675']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(MINIMUM_MEMORY, {'minimum_memory': 47.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad675', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad675', 'severe': 9, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad675', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad675', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad675', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad675', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad675', 'memory': 247.0})
mdb.jobs['Quad675']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(MINIMUM_MEMORY, {'minimum_memory': 47.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad675', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad675', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad675', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad675']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad675'})
mdb.jobs['Quad675']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 22:00:09 2022', 'jobName': 'Quad675'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 6.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad65', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad65'].submit(consistencyChecking=OFF)
mdb.jobs['Quad65']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 6.5', 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad65.odb', 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 27524, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad65', 'memory': 353.0})
mdb.jobs['Quad65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad65', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad65', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad65', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad65', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad65', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad65', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad65', 'memory': 346.0})
mdb.jobs['Quad65']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad65', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad65', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad65', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad65', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad65', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad65']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad65', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad65']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad65'})
mdb.jobs['Quad65']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 22:04:44 2022', 
    'jobName': 'Quad65'})
mdb.Job(atTime=None, contactPrint=OFF, description='Size 6.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad625', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad625'].submit(consistencyChecking=OFF)
mdb.jobs['Quad625']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 6.25', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad625.odb', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 17960, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad625', 'memory': 353.0})
mdb.jobs['Quad625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad625', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad625', 'memory': 346.0})
mdb.jobs['Quad625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MINIMUM_MEMORY, {'minimum_memory': 61.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad625', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 22:14:55 2022', 'jobName': 'Quad625'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.25)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.jobs['Quad625']
mdb.Job(atTime=None, contactPrint=OFF, description='Size 6.25', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad625', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad625'].submit(consistencyChecking=OFF)
mdb.jobs['Quad625']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 6.25', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad625.odb', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 21540, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad625', 'memory': 415.0})
mdb.jobs['Quad625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MINIMUM_MEMORY, {'minimum_memory': 71.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad625', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad625', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad625', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad625', 'memory': 409.0})
mdb.jobs['Quad625']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(MINIMUM_MEMORY, {'minimum_memory': 70.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad625', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad625', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad625', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad625']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad625'})
mdb.jobs['Quad625']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 22:20:48 2022', 'jobName': 'Quad625'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 6', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad6', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad6'].submit(consistencyChecking=OFF)
mdb.jobs['Quad6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 6', 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad6.odb', 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 18312, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad6', 'memory': 431.0})
mdb.jobs['Quad6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(MINIMUM_MEMORY, {'minimum_memory': 73.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad6', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad6', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad6', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad6', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad6', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad6', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad6', 'memory': 424.0})
mdb.jobs['Quad6']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(MINIMUM_MEMORY, {'minimum_memory': 72.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad6', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad6', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad6', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad6', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad6', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad6']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad6', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad6']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad6'})
mdb.jobs['Quad6']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 22:25:42 2022', 
    'jobName': 'Quad6'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.75)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 5.75', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad575', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad575'].submit(consistencyChecking=OFF)
mdb.jobs['Quad575']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 5.75', 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad575.odb', 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 19220, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad575', 'memory': 503.0})
mdb.jobs['Quad575']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(MINIMUM_MEMORY, {'minimum_memory': 85.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad575', 'severe': 7, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad575', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad575', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad575', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad575', 'memory': 498.0})
mdb.jobs['Quad575']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(MINIMUM_MEMORY, {'minimum_memory': 84.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad575', 'severe': 6, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad575', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad575', 'severe': 4, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad575', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad575']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad575'})
mdb.jobs['Quad575']._Message(JOB_COMPLETED, {
    'time': 'Sat Nov 26 22:31:56 2022', 'jobName': 'Quad575'})
mdb.models['Model-1'].parts['Summative v2'].deleteMesh()
mdb.models['Model-1'].parts['Summative v2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['Model-1'].parts['Summative v2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='Size 5.5', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Quad55', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Quad55'].submit(consistencyChecking=OFF)
mdb.jobs['Quad55']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 0, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(HEADING, {'phase': BATCHPRE_PHASE, 
    'heading': 'Size 5.5', 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The general contact domain for modeling contact interactions in Abaqus/Standard has double-sided facets. Initial contact adjustments for resolving gaps and  overclosures when a surface with double-sided facets is paired with any surface having double-sided facets may be incorrect. Similarly, adjustments for double-sided surfaces crossing each other may be incorrect and no additional warnings or error messages will be issued. In all these cases, we recommend using single-sided surfaces under *CONTACT INITIALIZATION ASSIGNMENT to  handle initial adjustments more precisely and avoid  possible convergence problems.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (372 INSTANCE LUG2-1,143 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (29 INSTANCE LUG2-1,154 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (144 INSTANCE LUG2-1,30 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (373 INSTANCE LUG2-1,372 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (154 INSTANCE LUG2-1,153 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (145 INSTANCE LUG2-1,144 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (374 INSTANCE LUG2-1,373 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ADJACENT SECONDARY NODES (153 INSTANCE LUG2-1,152 INSTANCE LUG2-1) ARE ON THE OPPOSITE SIDES OF DOUBLE-SIDED MAIN SURFACE.', 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\Quad55.odb', 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'HP-P9-0', 'handle': 20708, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad55', 'memory': 509.0})
mdb.jobs['Quad55']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(MINIMUM_MEMORY, {'minimum_memory': 83.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Quad55', 'severe': 7, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Quad55', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'Quad55', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 0.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 1, 
    'jobName': 'Quad55', 'severe': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 0.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'Quad55', 'severe': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'Quad55', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad55']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Quad55', 'memory': 499.0})
mdb.jobs['Quad55']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 112640.0, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(MINIMUM_MEMORY, {'minimum_memory': 82.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Quad55', 'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Quad55', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Quad55', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.575, 'attempts': 1, 
    'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 'step': 2, 
    'jobName': 'Quad55', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 1.9125, 'attempts': 1, 
    'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 'step': 2, 
    'jobName': 'Quad55', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Quad55']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'Quad55', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Quad55']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Quad55'})
mdb.jobs['Quad55']._Message(JOB_COMPLETED, {'time': 'Sat Nov 26 22:37:25 2022', 
    'jobName': 'Quad55'})
# Save by xh20879 on 2022_11_26-23.23.42; build 2022.HF3 2022_05_20-02.07.52 176569
